socket:
Description: Creates a new socket.
Usage: int socket(int domain, int type, int protocol);

close:
Description: Closes a file descriptor, including sockets.
Usage: int close(int fd);
setsockopt:

Description: Sets options for a socket.
Usage: int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);

getsockname:
Description: Retrieves the local address of a bound socket.
Usage: int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

getprotobyname:
Description: Retrieves protocol information based on protocol name.
Usage: struct protoent *getprotobyname(const char *name);

gethostbyname:
Description: Resolves a hostname to an IP address.
Usage: struct hostent *gethostbyname(const char *name);

getaddrinfo:
Description: Resolves a hostname and service name to a list of socket addresses.
Usage: int getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);

freeaddrinfo:
Description: Frees memory allocated by getaddrinfo.
Usage: void freeaddrinfo(struct addrinfo *res);

bind:
Description: Binds a socket to a specific address and port.
Usage: int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

connect:
Description: Establishes a connection to a remote server.
Usage: int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

listen:
Description: Listens for incoming connections on a socket.
Usage: int listen(int sockfd, int backlog);

accept:
Description: Accepts an incoming connection on a listening socket.
Usage: int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

htons, htonl, ntohs, ntohl:
Description: Convert values between host and network byte order (short and long).
Usage: uint16_t htons(uint16_t hostshort);, uint32_t htonl(uint32_t hostlong);, uint16_t ntohs(uint16_t netshort);, uint32_t ntohl(uint32_t netlong);

inet_addr:
Description: Converts an IPv4 address from text to binary form.
Usage: in_addr_t inet_addr(const char *cp);
inet_ntoa:

Description: Converts an IPv4 address from binary to text form.
Usage: char *inet_ntoa(struct in_addr in);

send, recv:
Description: Sends or receives data on a connected socket.
Usage: ssize_t send(int sockfd, const void *buf, size_t len, int flags);, ssize_t recv(int sockfd, void *buf, size_t len, int flags);

signal, sigaction:
Description: Sets a function to handle a specific signal.
Usage: void (*signal(int signum, void (*handler)(int)))(int);, int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
lseek:

Description: Moves the file pointer to a specified offset.
Usage: off_t lseek(int fd, off_t offset, int whence);

fstat:
Description: Gets information about an open file.
Usage: int fstat(int fd, struct stat *buf);

fcntl:
Description: Performs various operations on file descriptors.
Usage: int fcntl(int fd, int cmd, ... /* arg */ );

poll, select, kqueue, epoll:
Description: Multiplex I/O operations.
Usage: int poll(struct pollfd *fds, nfds_t nfds, int timeout);, int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);, int kqueue(void);, int epoll_create(int size);